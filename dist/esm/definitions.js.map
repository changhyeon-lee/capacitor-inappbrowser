{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAuBA,MAAM,CAAN,IAAY,eAGX;AAHD,WAAY,eAAe;IACzB,kCAAe,CAAA;IACf,kCAAe,CAAA;AACjB,CAAC,EAHW,eAAe,KAAf,eAAe,QAG1B;AACD,MAAM,CAAN,IAAY,WAKX;AALD,WAAY,WAAW;IACrB,oCAAqB,CAAA;IACrB,wCAAyB,CAAA;IACzB,8BAAe,CAAA;IACf,2BAAY,CAAA;AACd,CAAC,EALW,WAAW,KAAX,WAAW,QAKtB","sourcesContent":["import type { PluginListenerHandle } from \"@capacitor/core\";\r\n\r\nexport interface UrlEvent {\r\n  /**\r\n   * Emit when the url changes\r\n   *\r\n   * @since 0.0.1\r\n   */\r\n  url: string;\r\n}\r\nexport interface BtnEvent {\r\n  /**\r\n   * Emit when a button is clicked.\r\n   *\r\n   * @since 0.0.1\r\n   */\r\n  url: string;\r\n}\r\n\r\nexport type UrlChangeListener = (state: UrlEvent) => void;\r\nexport type ConfirmBtnListener = (state: BtnEvent) => void;\r\nexport type ButtonNearListener = (state: {}) => void;\r\n\r\nexport enum BackgroundColor {\r\n  WHITE = \"white\",\r\n  BLACK = \"black\",\r\n}\r\nexport enum ToolBarType {\r\n  ACTIVITY = \"activity\",\r\n  NAVIGATION = \"navigation\",\r\n  BLANK = \"blank\",\r\n  DEFAULT = \"\",\r\n}\r\n\r\nexport interface Headers {\r\n  [key: string]: string;\r\n}\r\n\r\nexport interface GetCookieOptions {\r\n  url: string;\r\n  includeHttpOnly?: boolean;\r\n}\r\n\r\nexport interface ClearCookieOptions {\r\n  url: string;\r\n}\r\n\r\nexport interface Credentials {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\nexport interface OpenOptions {\r\n  /**\r\n   * Target URL to load.\r\n   * @since 0.1.0\r\n   */\r\n  url: string;\r\n  /**\r\n   * Headers to send with the request.\r\n   * @since 0.1.0\r\n   */\r\n  headers?: Headers;\r\n  /**\r\n   * Credentials to send with the request and all subsequent requests for the same host.\r\n   * @since 6.1.0\r\n   */\r\n  credentials?: Credentials;\r\n  /**\r\n   * if true, the browser will be presented after the page is loaded, if false, the browser will be presented immediately.\r\n   * @since 0.1.0\r\n   */\r\n  isPresentAfterPageLoad?: boolean;\r\n  preventDeeplink?: boolean;\r\n}\r\n\r\nexport interface DisclaimerOptions {\r\n  title: string;\r\n  message: string;\r\n  confirmBtn: string;\r\n  cancelBtn: string;\r\n}\r\n\r\nexport interface OpenWebViewOptions {\r\n  /**\r\n   * Target URL to load.\r\n   * @since 0.1.0\r\n   */\r\n  url: string;\r\n  /**\r\n   * Headers to send with the request.\r\n   * @since 0.1.0\r\n   */\r\n  headers?: Headers;\r\n  /**\r\n   * Credentials to send with the request and all subsequent requests for the same host.\r\n   * @since 6.1.0\r\n   */\r\n  credentials?: Credentials;\r\n  /**\r\n   * share options\r\n   * @since 0.1.0\r\n   */\r\n  shareDisclaimer?: DisclaimerOptions;\r\n  /**\r\n   * Toolbar type\r\n   * @since 0.1.0\r\n   * @default ToolBarType.DEFAULT\r\n   */\r\n  toolbarType?: ToolBarType;\r\n  /**\r\n   * Share subject\r\n   * @since 0.1.0\r\n   */\r\n  shareSubject?: string;\r\n  /**\r\n   * Title of the browser\r\n   * @since 0.1.0\r\n   * @default 'New Window'\r\n   */\r\n  title?: string;\r\n  /**\r\n   * Background color of the browser, only on IOS\r\n   * @since 0.1.0\r\n   * @default BackgroundColor.BLACK\r\n   */\r\n  backgroundColor?: BackgroundColor;\r\n  /**\r\n   * If true, active the native navigation within the webview, Android only\r\n   *\r\n   * @default false\r\n   */\r\n  activeNativeNavigationForWebview?: boolean;\r\n  /**\r\n   * Disable the possibility to go back on native application,\r\n   * usefull to force user to stay on the webview, Android only\r\n   *\r\n   * @default false\r\n   */\r\n  disableGoBackOnNativeApplication?: boolean;\r\n  /**\r\n   * Open url in a new window fullscreen\r\n   *\r\n   * isPresentAfterPageLoad: if true, the browser will be presented after the page is loaded, if false, the browser will be presented immediately.\r\n   * @since 0.1.0\r\n   * @default false\r\n   */\r\n  isPresentAfterPageLoad?: boolean;\r\n  /**\r\n   * Whether the website in the webview is inspectable or not, ios only\r\n   *\r\n   * @default false\r\n   */\r\n  isInspectable?: boolean;\r\n  /**\r\n   * Whether the webview opening is animated or not, ios only\r\n   *\r\n   * @default true\r\n   */\r\n  isAnimated?: boolean;\r\n  /**\r\n   * Shows a reload button that reloads the web page\r\n   * @since 1.0.15\r\n   * @default false\r\n   */\r\n  showReloadButton?: boolean;\r\n  /**\r\n   * CloseModal: if true a confirm will be displayed when user clicks on close button, if false the browser will be closed immediately.\r\n   *\r\n   * @since 1.1.0\r\n   * @default false\r\n   */\r\n  closeModal?: boolean;\r\n  /**\r\n   * CloseModalTitle: title of the confirm when user clicks on close button, only on IOS\r\n   *\r\n   * @since 1.1.0\r\n   * @default 'Close'\r\n   */\r\n  closeModalTitle?: string;\r\n  /**\r\n   * CloseModalDescription: description of the confirm when user clicks on close button, only on IOS\r\n   *\r\n   * @since 1.1.0\r\n   * @default 'Are you sure you want to close this window?'\r\n   */\r\n  closeModalDescription?: string;\r\n  /**\r\n   * CloseModalOk: text of the confirm button when user clicks on close button, only on IOS\r\n   *\r\n   * @since 1.1.0\r\n   * @default 'Close'\r\n   */\r\n  closeModalOk?: string;\r\n  /**\r\n   * CloseModalCancel: text of the cancel button when user clicks on close button, only on IOS\r\n   *\r\n   * @since 1.1.0\r\n   * @default 'Cancel'\r\n   */\r\n  closeModalCancel?: string;\r\n  /**\r\n   * visibleTitle: if true the website title would be shown else shown empty\r\n   *\r\n   * @since 1.2.5\r\n   * @default true\r\n   */\r\n  visibleTitle?: boolean;\r\n  /**\r\n   * toolbarColor: color of the toolbar in hex format\r\n   *\r\n   * @since 1.2.5\r\n   * @default '#ffffff''\r\n   */\r\n  toolbarColor?: string;\r\n  /**\r\n   * showArrow: if true an arrow would be shown instead of cross for closing the window\r\n   *\r\n   * @since 1.2.5\r\n   * @default false\r\n   */\r\n  showArrow?: boolean;\r\n  /**\r\n   * ignoreUntrustedSSLError: if true, the webview will ignore untrusted SSL errors allowing the user to view the website.\r\n   *\r\n   * @since 6.1.0\r\n   * @default false\r\n   */\r\n  ignoreUntrustedSSLError?: boolean;\r\n  /**\r\n   * preShowScript: if isPresentAfterPageLoad is true and this variable is set the plugin will inject a script before showing the browser.\r\n   * This script will be run in an async context. The plugin will wait for the script to finish (max 10 seconds)\r\n   *\r\n   * @since 6.6.0\r\n   */\r\n  preShowScript?: String;\r\n  /**\r\n   * buttonNearDone allows for a creation of a custom button. Please see [buttonNearDone.md](/buttonNearDone.md) for more info.\r\n   *\r\n   * @since 6.7.0\r\n   */\r\n  buttonNearDone?: {\r\n    ios: {\r\n      iconType: 'sf-symbol' | 'asset',\r\n      icon: String\r\n    },\r\n    android: {\r\n      iconType: 'asset',\r\n      icon: String,\r\n      width?: number\r\n      height?: number\r\n    }\r\n  };\r\n}\r\n\r\nexport interface InAppBrowserPlugin {\r\n  /**\r\n   * Open url in a new window fullscreen\r\n   *\r\n   * @since 0.1.0\r\n   */\r\n  open(options: OpenOptions): Promise<any>;\r\n\r\n  /**\r\n   * Clear cookies of url\r\n   *\r\n   * @since 0.5.0\r\n   */\r\n  clearCookies(options: ClearCookieOptions): Promise<any>;\r\n  /**\r\n   * Clear all cookies\r\n   *\r\n   * @since 6.5.0\r\n   */\r\n  clearAllCookies(): Promise<any>;\r\n\r\n  /**\r\n   * Clear cache\r\n   *\r\n   * @since 6.5.0\r\n   */\r\n  clearCache(): Promise<any>;\r\n\r\n  /**\r\n   * Get cookies for a specific URL.\r\n   * @param options The options, including the URL to get cookies for.\r\n   * @returns A promise that resolves with the cookies.\r\n   */\r\n  getCookies(options: GetCookieOptions): Promise<Record<string, string>>;\r\n  /**\r\n   * Close the webview.\r\n   */\r\n  close(): Promise<any>;\r\n  /**\r\n   * Open url in a new webview with toolbars\r\n   *\r\n   * @since 0.1.0\r\n   */\r\n  openWebView(options: OpenWebViewOptions): Promise<any>;\r\n  /**\r\n   * Injects JavaScript code into the InAppBrowser window.\r\n   */\r\n  executeScript({ code }: { code: string }): Promise<void>;\r\n  /**\r\n   * Sends an event to the webview. you can listen to this event with addListener(\"messageFromWebview\", listenerFunc: (event: Record<string, any>) => void)\r\n   * detail is the data you want to send to the webview, it's a requirement of Capacitor we cannot send direct objects\r\n   * Your object has to be serializable to JSON, so no functions or other non-JSON-serializable types are allowed.\r\n   */\r\n  postMessage(options: { detail: Record<string, any> }): Promise<void>;\r\n  /**\r\n   * Sets the URL of the webview.\r\n   */\r\n  setUrl(options: { url: string }): Promise<any>;\r\n  /**\r\n   * Listen for url change, only for openWebView\r\n   *\r\n   * @since 0.0.1\r\n   */\r\n  addListener(\r\n    eventName: \"urlChangeEvent\",\r\n    listenerFunc: UrlChangeListener,\r\n  ): Promise<PluginListenerHandle>;\r\n\r\n  addListener(\r\n    eventName: \"buttonNearDoneClick\",\r\n    listenerFunc: ButtonNearListener,\r\n  ): Promise<PluginListenerHandle>;\r\n\r\n  /**\r\n   * Listen for close click only for openWebView\r\n   *\r\n   * @since 0.4.0\r\n   */\r\n  addListener(\r\n    eventName: \"closeEvent\",\r\n    listenerFunc: UrlChangeListener,\r\n  ): Promise<PluginListenerHandle>;\r\n  /**\r\n   * Will be triggered when user clicks on confirm button when disclaimer is required, works only on iOS\r\n   *\r\n   * @since 0.0.1\r\n   */\r\n  addListener(\r\n    eventName: \"confirmBtnClicked\",\r\n    listenerFunc: ConfirmBtnListener,\r\n  ): Promise<PluginListenerHandle>;\r\n  /**\r\n   * Will be triggered when event is sent from webview, to send an event to the webview use window.mobileApp.postMessage({ \"detail\": { \"message\": \"myMessage\" } })\r\n   * detail is the data you want to send to the webview, it's a requirement of Capacitor we cannot send direct objects\r\n   * Your object has to be serializable to JSON, so no functions or other non-JSON-serializable types are allowed.\r\n   *\r\n   * This method is inject at runtime in the webview\r\n   */\r\n  addListener(\r\n    eventName: \"messageFromWebview\",\r\n    listenerFunc: (event: { detail: Record<string, any> }) => void,\r\n  ): Promise<PluginListenerHandle>;\r\n\r\n  /**\r\n   * Will be triggered when page is loaded\r\n   */\r\n  addListener(\r\n    eventName: \"browserPageLoaded\",\r\n    listenerFunc: () => void,\r\n  ): Promise<PluginListenerHandle>;\r\n\r\n  /**\r\n   * Will be triggered when page load error\r\n   */\r\n  addListener(\r\n    eventName: \"pageLoadError\",\r\n    listenerFunc: () => void,\r\n  ): Promise<PluginListenerHandle>;\r\n  /**\r\n   * Remove all listeners for this plugin.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  removeAllListeners(): Promise<void>;\r\n\r\n  /**\r\n   * Reload the current web page.\r\n   *\r\n   * @since 1.0.0\r\n   */\r\n  reload(): Promise<any>; // Add this line\r\n}\r\n"]}